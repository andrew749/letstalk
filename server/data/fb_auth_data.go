// Code generated by ModelQ
// fb_auth_data.go contains model for the database table [letstalk.fb_auth_data]

package data

import (
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"github.com/mijia/modelq/gmq"
	"strings"
)

type FbAuthData struct {
	UserId   int    `json:"user_id"`
	FbUserId string `json:"fb_user_id"`
}

// Start of the FbAuthData APIs.

func (obj FbAuthData) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<FbAuthData UserId=%v>", obj.UserId)
	} else {
		return string(data)
	}
}

func (obj FbAuthData) Get(dbtx gmq.DbTx) (FbAuthData, error) {
	filter := FbAuthDataObjs.FilterUserId("=", obj.UserId)
	if result, err := FbAuthDataObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj FbAuthData) Insert(dbtx gmq.DbTx) (FbAuthData, error) {
	_, err := FbAuthDataObjs.Insert(obj).Run(dbtx)
	return obj, err
}

func (obj FbAuthData) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{"FbUserId"}
	filter := FbAuthDataObjs.FilterUserId("=", obj.UserId)
	if result, err := FbAuthDataObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj FbAuthData) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := FbAuthDataObjs.FilterUserId("=", obj.UserId)
	if result, err := FbAuthDataObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _FbAuthDataQuery struct {
	gmq.Query
}

func (q _FbAuthDataQuery) Where(f gmq.Filter) _FbAuthDataQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _FbAuthDataQuery) OrderBy(by ...string) _FbAuthDataQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := FbAuthDataObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _FbAuthDataQuery) GroupBy(by ...string) _FbAuthDataQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := FbAuthDataObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _FbAuthDataQuery) Limit(offsets ...int64) _FbAuthDataQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _FbAuthDataQuery) Page(number, size int) _FbAuthDataQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _FbAuthDataQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type FbAuthDataRowVisitor func(obj FbAuthData) bool

func (q _FbAuthDataQuery) Iterate(dbtx gmq.DbTx, functor FbAuthDataRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := FbAuthDataObjs.toFbAuthData(columns, rb)
		return functor(obj)
	})
}

func (q _FbAuthDataQuery) One(dbtx gmq.DbTx) (FbAuthData, error) {
	var obj FbAuthData
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = FbAuthDataObjs.toFbAuthData(columns, rb)
		return true
	})
	return obj, err
}

func (q _FbAuthDataQuery) List(dbtx gmq.DbTx) ([]FbAuthData, error) {
	result := make([]FbAuthData, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := FbAuthDataObjs.toFbAuthData(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

func (q _FbAuthDataQuery) Count(dbtx gmq.DbTx) (int, error) {
	result := 0

	err := q.Query.SelectCount(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		if len(columns) == len(rb) {
			for i := range columns {
				if "_count" == columns[i].Name {
					result = gmq.AsInt(rb[i])

					return true
				}
			}
		}

		return true
	})

	return result, err
}

// Start of the model facade Apis.

type _FbAuthDataObjs struct {
	fcMap map[string]string
}

func (o _FbAuthDataObjs) Names() (schema, tbl, alias string) {
	return "letstalk", "fb_auth_data", "FbAuthData"
}

func (o _FbAuthDataObjs) Select(fields ...string) _FbAuthDataQuery {
	q := _FbAuthDataQuery{}
	if len(fields) == 0 {
		fields = []string{"UserId", "FbUserId"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _FbAuthDataObjs) Insert(obj FbAuthData) _FbAuthDataQuery {
	q := _FbAuthDataQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "UserId", "FbUserId"))
	return q
}

func (o _FbAuthDataObjs) Update(obj FbAuthData, fields ...string) _FbAuthDataQuery {
	q := _FbAuthDataQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _FbAuthDataObjs) Delete() _FbAuthDataQuery {
	q := _FbAuthDataQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _FbAuthDataObjs) FilterUserId(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("user_id", op, params...)
}

func (o _FbAuthDataObjs) FilterFbUserId(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("fb_user_id", op, params...)
}

///// Managed Objects Columns definition

func (o _FbAuthDataObjs) ColumnUserId(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"user_id", value}
}

func (o _FbAuthDataObjs) ColumnFbUserId(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"fb_user_id", value}
}

////// Internal helper funcs

func (o _FbAuthDataObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _FbAuthDataObjs) toFbAuthData(columns []gmq.Column, rb []sql.RawBytes) FbAuthData {
	obj := FbAuthData{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "user_id":
				obj.UserId = gmq.AsInt(rb[i])
			case "fb_user_id":
				obj.FbUserId = gmq.AsString(rb[i])
			}
		}
	}
	return obj
}

func (o _FbAuthDataObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "UserId":
			data = append(data, o.ColumnUserId())
		case "FbUserId":
			data = append(data, o.ColumnFbUserId())
		}
	}
	return data
}

func (o _FbAuthDataObjs) columnsWithData(obj FbAuthData, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "UserId":
			data = append(data, o.ColumnUserId(obj.UserId))
		case "FbUserId":
			data = append(data, o.ColumnFbUserId(obj.FbUserId))
		}
	}
	return data
}

var FbAuthDataObjs _FbAuthDataObjs

func init() {
	FbAuthDataObjs.fcMap = map[string]string{
		"UserId":   "user_id",
		"FbUserId": "fb_user_id",
	}
	gob.Register(FbAuthData{})
}
