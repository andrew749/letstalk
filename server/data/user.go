// Code generated by ModelQ
// user.go contains model for the database table [letstalk.user]

package data

import (
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"github.com/mijia/modelq/gmq"
	"strings"
	"time"
)

type User struct {
	UserId    int       `json:"user_id"`
	Nickname  string    `json:"nickname"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Gender    int       `json:"gender"`
	Birthdate time.Time `json:"birthdate"`
}

// Start of the User APIs.

func (obj User) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<User UserId=%v>", obj.UserId)
	} else {
		return string(data)
	}
}

func (obj User) Get(dbtx gmq.DbTx) (User, error) {
	filter := UserObjs.FilterUserId("=", obj.UserId)
	if result, err := UserObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj User) Insert(dbtx gmq.DbTx) (User, error) {
	_, err := UserObjs.Insert(obj).Run(dbtx)
	return obj, err
}

func (obj User) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{"Nickname", "Name", "Email", "Gender", "Birthdate"}
	filter := UserObjs.FilterUserId("=", obj.UserId)
	if result, err := UserObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj User) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := UserObjs.FilterUserId("=", obj.UserId)
	if result, err := UserObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _UserQuery struct {
	gmq.Query
}

func (q _UserQuery) Where(f gmq.Filter) _UserQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _UserQuery) OrderBy(by ...string) _UserQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := UserObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _UserQuery) GroupBy(by ...string) _UserQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := UserObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _UserQuery) Limit(offsets ...int64) _UserQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _UserQuery) Page(number, size int) _UserQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _UserQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type UserRowVisitor func(obj User) bool

func (q _UserQuery) Iterate(dbtx gmq.DbTx, functor UserRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := UserObjs.toUser(columns, rb)
		return functor(obj)
	})
}

func (q _UserQuery) One(dbtx gmq.DbTx) (User, error) {
	var obj User
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = UserObjs.toUser(columns, rb)
		return true
	})
	return obj, err
}

func (q _UserQuery) List(dbtx gmq.DbTx) ([]User, error) {
	result := make([]User, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := UserObjs.toUser(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

func (q _UserQuery) Count(dbtx gmq.DbTx) (int, error) {
	result := 0

	err := q.Query.SelectCount(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		if len(columns) == len(rb) {
			for i := range columns {
				if "_count" == columns[i].Name {
					result = gmq.AsInt(rb[i])

					return true
				}
			}
		}

		return true
	})

	return result, err
}

// Start of the model facade Apis.

type _UserObjs struct {
	fcMap map[string]string
}

func (o _UserObjs) Names() (schema, tbl, alias string) {
	return "letstalk", "user", "User"
}

func (o _UserObjs) Select(fields ...string) _UserQuery {
	q := _UserQuery{}
	if len(fields) == 0 {
		fields = []string{"UserId", "Nickname", "Name", "Email", "Gender", "Birthdate"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _UserObjs) Insert(obj User) _UserQuery {
	q := _UserQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "UserId", "Nickname", "Name", "Email", "Gender", "Birthdate"))
	return q
}

func (o _UserObjs) Update(obj User, fields ...string) _UserQuery {
	q := _UserQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _UserObjs) Delete() _UserQuery {
	q := _UserQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _UserObjs) FilterUserId(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("user_id", op, params...)
}

func (o _UserObjs) FilterNickname(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("nickname", op, params...)
}

func (o _UserObjs) FilterName(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("name", op, params...)
}

func (o _UserObjs) FilterEmail(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("email", op, params...)
}

func (o _UserObjs) FilterGender(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("gender", op, params...)
}

func (o _UserObjs) FilterBirthdate(op string, p time.Time, ps ...time.Time) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("birthdate", op, params...)
}

///// Managed Objects Columns definition

func (o _UserObjs) ColumnUserId(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"user_id", value}
}

func (o _UserObjs) ColumnNickname(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"nickname", value}
}

func (o _UserObjs) ColumnName(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"name", value}
}

func (o _UserObjs) ColumnEmail(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"email", value}
}

func (o _UserObjs) ColumnGender(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"gender", value}
}

func (o _UserObjs) ColumnBirthdate(p ...time.Time) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"birthdate", value}
}

////// Internal helper funcs

func (o _UserObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _UserObjs) toUser(columns []gmq.Column, rb []sql.RawBytes) User {
	obj := User{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "user_id":
				obj.UserId = gmq.AsInt(rb[i])
			case "nickname":
				obj.Nickname = gmq.AsString(rb[i])
			case "name":
				obj.Name = gmq.AsString(rb[i])
			case "email":
				obj.Email = gmq.AsString(rb[i])
			case "gender":
				obj.Gender = gmq.AsInt(rb[i])
			case "birthdate":
				obj.Birthdate = gmq.AsTime(rb[i])
			}
		}
	}
	return obj
}

func (o _UserObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "UserId":
			data = append(data, o.ColumnUserId())
		case "Nickname":
			data = append(data, o.ColumnNickname())
		case "Name":
			data = append(data, o.ColumnName())
		case "Email":
			data = append(data, o.ColumnEmail())
		case "Gender":
			data = append(data, o.ColumnGender())
		case "Birthdate":
			data = append(data, o.ColumnBirthdate())
		}
	}
	return data
}

func (o _UserObjs) columnsWithData(obj User, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "UserId":
			data = append(data, o.ColumnUserId(obj.UserId))
		case "Nickname":
			data = append(data, o.ColumnNickname(obj.Nickname))
		case "Name":
			data = append(data, o.ColumnName(obj.Name))
		case "Email":
			data = append(data, o.ColumnEmail(obj.Email))
		case "Gender":
			data = append(data, o.ColumnGender(obj.Gender))
		case "Birthdate":
			data = append(data, o.ColumnBirthdate(obj.Birthdate))
		}
	}
	return data
}

var UserObjs _UserObjs

func init() {
	UserObjs.fcMap = map[string]string{
		"UserId":    "user_id",
		"Nickname":  "nickname",
		"Name":      "name",
		"Email":     "email",
		"Gender":    "gender",
		"Birthdate": "birthdate",
	}
	gob.Register(User{})
}
