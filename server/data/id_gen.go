// Code generated by ModelQ
// id_gen.go contains model for the database table [letstalk.id_gen]

package data

import (
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mijia/modelq/gmq"
)

type IdGen struct {
	Id    int64 `json:"id"`
	NumId int   `json:"num_id"`
}

// Start of the IdGen APIs.

func (obj IdGen) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<IdGen Id=%v>", obj.Id)
	} else {
		return string(data)
	}
}

func (obj IdGen) Get(dbtx gmq.DbTx) (IdGen, error) {
	filter := IdGenObjs.FilterId("=", obj.Id)
	if result, err := IdGenObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj IdGen) Insert(dbtx gmq.DbTx) (IdGen, error) {
	if result, err := IdGenObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	} else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.Id = id
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj IdGen) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{"NumId"}
	filter := IdGenObjs.FilterId("=", obj.Id)
	if result, err := IdGenObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj IdGen) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := IdGenObjs.FilterId("=", obj.Id)
	if result, err := IdGenObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _IdGenQuery struct {
	gmq.Query
}

func (q _IdGenQuery) Where(f gmq.Filter) _IdGenQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _IdGenQuery) OrderBy(by ...string) _IdGenQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := IdGenObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _IdGenQuery) GroupBy(by ...string) _IdGenQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := IdGenObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _IdGenQuery) Limit(offsets ...int64) _IdGenQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _IdGenQuery) Page(number, size int) _IdGenQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _IdGenQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type IdGenRowVisitor func(obj IdGen) bool

func (q _IdGenQuery) Iterate(dbtx gmq.DbTx, functor IdGenRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := IdGenObjs.toIdGen(columns, rb)
		return functor(obj)
	})
}

func (q _IdGenQuery) One(dbtx gmq.DbTx) (IdGen, error) {
	var obj IdGen
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = IdGenObjs.toIdGen(columns, rb)
		return true
	})
	return obj, err
}

func (q _IdGenQuery) List(dbtx gmq.DbTx) ([]IdGen, error) {
	result := make([]IdGen, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := IdGenObjs.toIdGen(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

func (q _IdGenQuery) Count(dbtx gmq.DbTx) (int, error) {
	result := 0

	err := q.Query.SelectCount(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		if len(columns) == len(rb) {
			for i := range columns {
				if "_count" == columns[i].Name {
					result = gmq.AsInt(rb[i])

					return true
				}
			}
		}

		return true
	})

	return result, err
}

// Start of the model facade Apis.

type _IdGenObjs struct {
	fcMap map[string]string
}

func (o _IdGenObjs) Names() (schema, tbl, alias string) {
	return "letstalk", "id_gen", "IdGen"
}

func (o _IdGenObjs) Select(fields ...string) _IdGenQuery {
	q := _IdGenQuery{}
	if len(fields) == 0 {
		fields = []string{"Id", "NumId"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _IdGenObjs) Insert(obj IdGen) _IdGenQuery {
	q := _IdGenQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "NumId"))
	return q
}

func (o _IdGenObjs) Update(obj IdGen, fields ...string) _IdGenQuery {
	q := _IdGenQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _IdGenObjs) Delete() _IdGenQuery {
	q := _IdGenQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _IdGenObjs) FilterId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("id", op, params...)
}

func (o _IdGenObjs) FilterNumId(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("num_id", op, params...)
}

///// Managed Objects Columns definition

func (o _IdGenObjs) ColumnId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"id", value}
}

func (o _IdGenObjs) ColumnNumId(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"num_id", value}
}

////// Internal helper funcs

func (o _IdGenObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _IdGenObjs) toIdGen(columns []gmq.Column, rb []sql.RawBytes) IdGen {
	obj := IdGen{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "id":
				obj.Id = gmq.AsInt64(rb[i])
			case "num_id":
				obj.NumId = gmq.AsInt(rb[i])
			}
		}
	}
	return obj
}

func (o _IdGenObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId())
		case "NumId":
			data = append(data, o.ColumnNumId())
		}
	}
	return data
}

func (o _IdGenObjs) columnsWithData(obj IdGen, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId(obj.Id))
		case "NumId":
			data = append(data, o.ColumnNumId(obj.NumId))
		}
	}
	return data
}

var IdGenObjs _IdGenObjs

func init() {
	IdGenObjs.fcMap = map[string]string{
		"Id":    "id",
		"NumId": "num_id",
	}
	gob.Register(IdGen{})
}
