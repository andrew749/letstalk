// Code generated by ModelQ
// Foo.go contains model for the database table [letstalk.Foo]

package data

import (
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"github.com/mijia/modelq/gmq"
	"strings"
)

type Foo struct {
	Id int `json:"Id"`
}

// Start of the Foo APIs.

func (obj Foo) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<Foo Id=%v>", obj.Id)
	} else {
		return string(data)
	}
}

func (obj Foo) Get(dbtx gmq.DbTx) (Foo, error) {
	filter := FooObjs.FilterId("=", obj.Id)
	if result, err := FooObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj Foo) Insert(dbtx gmq.DbTx) (Foo, error) {
	if result, err := FooObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	} else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.Id = int(id)
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj Foo) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{}
	filter := FooObjs.FilterId("=", obj.Id)
	if result, err := FooObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj Foo) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := FooObjs.FilterId("=", obj.Id)
	if result, err := FooObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _FooQuery struct {
	gmq.Query
}

func (q _FooQuery) Where(f gmq.Filter) _FooQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _FooQuery) OrderBy(by ...string) _FooQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := FooObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _FooQuery) GroupBy(by ...string) _FooQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := FooObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _FooQuery) Limit(offsets ...int64) _FooQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _FooQuery) Page(number, size int) _FooQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _FooQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type FooRowVisitor func(obj Foo) bool

func (q _FooQuery) Iterate(dbtx gmq.DbTx, functor FooRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := FooObjs.toFoo(columns, rb)
		return functor(obj)
	})
}

func (q _FooQuery) One(dbtx gmq.DbTx) (Foo, error) {
	var obj Foo
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = FooObjs.toFoo(columns, rb)
		return true
	})
	return obj, err
}

func (q _FooQuery) List(dbtx gmq.DbTx) ([]Foo, error) {
	result := make([]Foo, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := FooObjs.toFoo(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

func (q _FooQuery) Count(dbtx gmq.DbTx) (int, error) {
	result := 0

	err := q.Query.SelectCount(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		if len(columns) == len(rb) {
			for i := range columns {
				if "_count" == columns[i].Name {
					result = gmq.AsInt(rb[i])

					return true
				}
			}
		}

		return true
	})

	return result, err
}

// Start of the model facade Apis.

type _FooObjs struct {
	fcMap map[string]string
}

func (o _FooObjs) Names() (schema, tbl, alias string) {
	return "letstalk", "Foo", "Foo"
}

func (o _FooObjs) Select(fields ...string) _FooQuery {
	q := _FooQuery{}
	if len(fields) == 0 {
		fields = []string{"Id"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _FooObjs) Insert(obj Foo) _FooQuery {
	q := _FooQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj))
	return q
}

func (o _FooObjs) Update(obj Foo, fields ...string) _FooQuery {
	q := _FooQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _FooObjs) Delete() _FooQuery {
	q := _FooQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _FooObjs) FilterId(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("Id", op, params...)
}

///// Managed Objects Columns definition

func (o _FooObjs) ColumnId(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"Id", value}
}

////// Internal helper funcs

func (o _FooObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _FooObjs) toFoo(columns []gmq.Column, rb []sql.RawBytes) Foo {
	obj := Foo{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "Id":
				obj.Id = gmq.AsInt(rb[i])
			}
		}
	}
	return obj
}

func (o _FooObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId())
		}
	}
	return data
}

func (o _FooObjs) columnsWithData(obj Foo, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId(obj.Id))
		}
	}
	return data
}

var FooObjs _FooObjs

func init() {
	FooObjs.fcMap = map[string]string{
		"Id": "Id",
	}
	gob.Register(Foo{})
}
