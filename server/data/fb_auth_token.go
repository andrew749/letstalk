// Code generated by ModelQ
// fb_auth_token.go contains model for the database table [letstalk.fb_auth_token]

package data

import (
	"encoding/gob"
	"encoding/json"

	"database/sql"
	"github.com/mijia/modelq/gmq"
	"strings"
	"time"
)

type FbAuthToken struct {
	UserId    int       `json:"user_id"`
	AuthToken string    `json:"auth_token"`
	Expiry    time.Time `json:"expiry"`
}

// Start of the FbAuthToken APIs.

func (obj FbAuthToken) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return "<FbAuthToken>"
	} else {
		return string(data)
	}
}

func (obj FbAuthToken) Get(dbtx gmq.DbTx) (FbAuthToken, error) {
	return obj, gmq.ErrNoPrimaryKeyDefined
}

func (obj FbAuthToken) Insert(dbtx gmq.DbTx) (FbAuthToken, error) {
	_, err := FbAuthTokenObjs.Insert(obj).Run(dbtx)
	return obj, err
}

func (obj FbAuthToken) Update(dbtx gmq.DbTx) (int64, error) {
	return 0, gmq.ErrNoPrimaryKeyDefined
}

func (obj FbAuthToken) Delete(dbtx gmq.DbTx) (int64, error) {
	return 0, gmq.ErrNoPrimaryKeyDefined
}

// Start of the inner Query Api

type _FbAuthTokenQuery struct {
	gmq.Query
}

func (q _FbAuthTokenQuery) Where(f gmq.Filter) _FbAuthTokenQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _FbAuthTokenQuery) OrderBy(by ...string) _FbAuthTokenQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := FbAuthTokenObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _FbAuthTokenQuery) GroupBy(by ...string) _FbAuthTokenQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := FbAuthTokenObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _FbAuthTokenQuery) Limit(offsets ...int64) _FbAuthTokenQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _FbAuthTokenQuery) Page(number, size int) _FbAuthTokenQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _FbAuthTokenQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type FbAuthTokenRowVisitor func(obj FbAuthToken) bool

func (q _FbAuthTokenQuery) Iterate(dbtx gmq.DbTx, functor FbAuthTokenRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := FbAuthTokenObjs.toFbAuthToken(columns, rb)
		return functor(obj)
	})
}

func (q _FbAuthTokenQuery) One(dbtx gmq.DbTx) (FbAuthToken, error) {
	var obj FbAuthToken
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = FbAuthTokenObjs.toFbAuthToken(columns, rb)
		return true
	})
	return obj, err
}

func (q _FbAuthTokenQuery) List(dbtx gmq.DbTx) ([]FbAuthToken, error) {
	result := make([]FbAuthToken, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := FbAuthTokenObjs.toFbAuthToken(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

func (q _FbAuthTokenQuery) Count(dbtx gmq.DbTx) (int, error) {
	result := 0

	err := q.Query.SelectCount(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		if len(columns) == len(rb) {
			for i := range columns {
				if "_count" == columns[i].Name {
					result = gmq.AsInt(rb[i])

					return true
				}
			}
		}

		return true
	})

	return result, err
}

// Start of the model facade Apis.

type _FbAuthTokenObjs struct {
	fcMap map[string]string
}

func (o _FbAuthTokenObjs) Names() (schema, tbl, alias string) {
	return "letstalk", "fb_auth_token", "FbAuthToken"
}

func (o _FbAuthTokenObjs) Select(fields ...string) _FbAuthTokenQuery {
	q := _FbAuthTokenQuery{}
	if len(fields) == 0 {
		fields = []string{"UserId", "AuthToken", "Expiry"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _FbAuthTokenObjs) Insert(obj FbAuthToken) _FbAuthTokenQuery {
	q := _FbAuthTokenQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "UserId", "AuthToken", "Expiry"))
	return q
}

func (o _FbAuthTokenObjs) Update(obj FbAuthToken, fields ...string) _FbAuthTokenQuery {
	q := _FbAuthTokenQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _FbAuthTokenObjs) Delete() _FbAuthTokenQuery {
	q := _FbAuthTokenQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _FbAuthTokenObjs) FilterUserId(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("user_id", op, params...)
}

func (o _FbAuthTokenObjs) FilterAuthToken(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("auth_token", op, params...)
}

func (o _FbAuthTokenObjs) FilterExpiry(op string, p time.Time, ps ...time.Time) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("expiry", op, params...)
}

///// Managed Objects Columns definition

func (o _FbAuthTokenObjs) ColumnUserId(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"user_id", value}
}

func (o _FbAuthTokenObjs) ColumnAuthToken(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"auth_token", value}
}

func (o _FbAuthTokenObjs) ColumnExpiry(p ...time.Time) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"expiry", value}
}

////// Internal helper funcs

func (o _FbAuthTokenObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _FbAuthTokenObjs) toFbAuthToken(columns []gmq.Column, rb []sql.RawBytes) FbAuthToken {
	obj := FbAuthToken{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "user_id":
				obj.UserId = gmq.AsInt(rb[i])
			case "auth_token":
				obj.AuthToken = gmq.AsString(rb[i])
			case "expiry":
				obj.Expiry = gmq.AsTime(rb[i])
			}
		}
	}
	return obj
}

func (o _FbAuthTokenObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "UserId":
			data = append(data, o.ColumnUserId())
		case "AuthToken":
			data = append(data, o.ColumnAuthToken())
		case "Expiry":
			data = append(data, o.ColumnExpiry())
		}
	}
	return data
}

func (o _FbAuthTokenObjs) columnsWithData(obj FbAuthToken, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "UserId":
			data = append(data, o.ColumnUserId(obj.UserId))
		case "AuthToken":
			data = append(data, o.ColumnAuthToken(obj.AuthToken))
		case "Expiry":
			data = append(data, o.ColumnExpiry(obj.Expiry))
		}
	}
	return data
}

var FbAuthTokenObjs _FbAuthTokenObjs

func init() {
	FbAuthTokenObjs.fcMap = map[string]string{
		"UserId":    "user_id",
		"AuthToken": "auth_token",
		"Expiry":    "expiry",
	}
	gob.Register(FbAuthToken{})
}
