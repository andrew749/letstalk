// Code generated by ModelQ
// matchings.go contains model for the database table [letstalk.matchings]

package data

import (
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"github.com/mijia/modelq/gmq"
	"strings"
)

type Matchings struct {
	MatchingId int `json:"matching_id"`
	User       int `json:"user"`
	OtherUser  int `json:"other_user"`
}

// Start of the Matchings APIs.

func (obj Matchings) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<Matchings MatchingId=%v>", obj.MatchingId)
	} else {
		return string(data)
	}
}

func (obj Matchings) Get(dbtx gmq.DbTx) (Matchings, error) {
	filter := MatchingsObjs.FilterMatchingId("=", obj.MatchingId)
	if result, err := MatchingsObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj Matchings) Insert(dbtx gmq.DbTx) (Matchings, error) {
	if result, err := MatchingsObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	} else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.MatchingId = int(id)
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj Matchings) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{"User", "OtherUser"}
	filter := MatchingsObjs.FilterMatchingId("=", obj.MatchingId)
	if result, err := MatchingsObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj Matchings) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := MatchingsObjs.FilterMatchingId("=", obj.MatchingId)
	if result, err := MatchingsObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _MatchingsQuery struct {
	gmq.Query
}

func (q _MatchingsQuery) Where(f gmq.Filter) _MatchingsQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _MatchingsQuery) OrderBy(by ...string) _MatchingsQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := MatchingsObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _MatchingsQuery) GroupBy(by ...string) _MatchingsQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := MatchingsObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _MatchingsQuery) Limit(offsets ...int64) _MatchingsQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _MatchingsQuery) Page(number, size int) _MatchingsQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _MatchingsQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type MatchingsRowVisitor func(obj Matchings) bool

func (q _MatchingsQuery) Iterate(dbtx gmq.DbTx, functor MatchingsRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := MatchingsObjs.toMatchings(columns, rb)
		return functor(obj)
	})
}

func (q _MatchingsQuery) One(dbtx gmq.DbTx) (Matchings, error) {
	var obj Matchings
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = MatchingsObjs.toMatchings(columns, rb)
		return true
	})
	return obj, err
}

func (q _MatchingsQuery) List(dbtx gmq.DbTx) ([]Matchings, error) {
	result := make([]Matchings, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := MatchingsObjs.toMatchings(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

func (q _MatchingsQuery) Count(dbtx gmq.DbTx) (int, error) {
	result := 0

	err := q.Query.SelectCount(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		if len(columns) == len(rb) {
			for i := range columns {
				if "_count" == columns[i].Name {
					result = gmq.AsInt(rb[i])

					return true
				}
			}
		}

		return true
	})

	return result, err
}

// Start of the model facade Apis.

type _MatchingsObjs struct {
	fcMap map[string]string
}

func (o _MatchingsObjs) Names() (schema, tbl, alias string) {
	return "letstalk", "matchings", "Matchings"
}

func (o _MatchingsObjs) Select(fields ...string) _MatchingsQuery {
	q := _MatchingsQuery{}
	if len(fields) == 0 {
		fields = []string{"MatchingId", "User", "OtherUser"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _MatchingsObjs) Insert(obj Matchings) _MatchingsQuery {
	q := _MatchingsQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "User", "OtherUser"))
	return q
}

func (o _MatchingsObjs) Update(obj Matchings, fields ...string) _MatchingsQuery {
	q := _MatchingsQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _MatchingsObjs) Delete() _MatchingsQuery {
	q := _MatchingsQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _MatchingsObjs) FilterMatchingId(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("matching_id", op, params...)
}

func (o _MatchingsObjs) FilterUser(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("user", op, params...)
}

func (o _MatchingsObjs) FilterOtherUser(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("other_user", op, params...)
}

///// Managed Objects Columns definition

func (o _MatchingsObjs) ColumnMatchingId(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"matching_id", value}
}

func (o _MatchingsObjs) ColumnUser(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"user", value}
}

func (o _MatchingsObjs) ColumnOtherUser(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"other_user", value}
}

////// Internal helper funcs

func (o _MatchingsObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _MatchingsObjs) toMatchings(columns []gmq.Column, rb []sql.RawBytes) Matchings {
	obj := Matchings{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "matching_id":
				obj.MatchingId = gmq.AsInt(rb[i])
			case "user":
				obj.User = gmq.AsInt(rb[i])
			case "other_user":
				obj.OtherUser = gmq.AsInt(rb[i])
			}
		}
	}
	return obj
}

func (o _MatchingsObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "MatchingId":
			data = append(data, o.ColumnMatchingId())
		case "User":
			data = append(data, o.ColumnUser())
		case "OtherUser":
			data = append(data, o.ColumnOtherUser())
		}
	}
	return data
}

func (o _MatchingsObjs) columnsWithData(obj Matchings, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "MatchingId":
			data = append(data, o.ColumnMatchingId(obj.MatchingId))
		case "User":
			data = append(data, o.ColumnUser(obj.User))
		case "OtherUser":
			data = append(data, o.ColumnOtherUser(obj.OtherUser))
		}
	}
	return data
}

var MatchingsObjs _MatchingsObjs

func init() {
	MatchingsObjs.fcMap = map[string]string{
		"MatchingId": "matching_id",
		"User":       "user",
		"OtherUser":  "other_user",
	}
	gob.Register(Matchings{})
}
