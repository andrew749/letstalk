// Code generated by ModelQ
// sessions.go contains model for the database table [letstalk.sessions]

package data

import (
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"github.com/mijia/modelq/gmq"
	"strings"
	"time"
)

type Sessions struct {
	SessionId  string    `json:"session_id"`
	UserId     int       `json:"user_id"`
	ExpiryDate time.Time `json:"expiry_date"`
}

// Start of the Sessions APIs.

func (obj Sessions) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<Sessions SessionId=%v>", obj.SessionId)
	} else {
		return string(data)
	}
}

func (obj Sessions) Get(dbtx gmq.DbTx) (Sessions, error) {
	filter := SessionsObjs.FilterSessionId("=", obj.SessionId)
	if result, err := SessionsObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj Sessions) Insert(dbtx gmq.DbTx) (Sessions, error) {
	_, err := SessionsObjs.Insert(obj).Run(dbtx)
	return obj, err
}

func (obj Sessions) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{"UserId", "ExpiryDate"}
	filter := SessionsObjs.FilterSessionId("=", obj.SessionId)
	if result, err := SessionsObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj Sessions) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := SessionsObjs.FilterSessionId("=", obj.SessionId)
	if result, err := SessionsObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _SessionsQuery struct {
	gmq.Query
}

func (q _SessionsQuery) Where(f gmq.Filter) _SessionsQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _SessionsQuery) OrderBy(by ...string) _SessionsQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := SessionsObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _SessionsQuery) GroupBy(by ...string) _SessionsQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := SessionsObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _SessionsQuery) Limit(offsets ...int64) _SessionsQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _SessionsQuery) Page(number, size int) _SessionsQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _SessionsQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type SessionsRowVisitor func(obj Sessions) bool

func (q _SessionsQuery) Iterate(dbtx gmq.DbTx, functor SessionsRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := SessionsObjs.toSessions(columns, rb)
		return functor(obj)
	})
}

func (q _SessionsQuery) One(dbtx gmq.DbTx) (Sessions, error) {
	var obj Sessions
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = SessionsObjs.toSessions(columns, rb)
		return true
	})
	return obj, err
}

func (q _SessionsQuery) List(dbtx gmq.DbTx) ([]Sessions, error) {
	result := make([]Sessions, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := SessionsObjs.toSessions(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

func (q _SessionsQuery) Count(dbtx gmq.DbTx) (int, error) {
	result := 0

	err := q.Query.SelectCount(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		if len(columns) == len(rb) {
			for i := range columns {
				if "_count" == columns[i].Name {
					result = gmq.AsInt(rb[i])

					return true
				}
			}
		}

		return true
	})

	return result, err
}

// Start of the model facade Apis.

type _SessionsObjs struct {
	fcMap map[string]string
}

func (o _SessionsObjs) Names() (schema, tbl, alias string) {
	return "letstalk", "sessions", "Sessions"
}

func (o _SessionsObjs) Select(fields ...string) _SessionsQuery {
	q := _SessionsQuery{}
	if len(fields) == 0 {
		fields = []string{"SessionId", "UserId", "ExpiryDate"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _SessionsObjs) Insert(obj Sessions) _SessionsQuery {
	q := _SessionsQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "SessionId", "UserId", "ExpiryDate"))
	return q
}

func (o _SessionsObjs) Update(obj Sessions, fields ...string) _SessionsQuery {
	q := _SessionsQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _SessionsObjs) Delete() _SessionsQuery {
	q := _SessionsQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _SessionsObjs) FilterSessionId(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("session_id", op, params...)
}

func (o _SessionsObjs) FilterUserId(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("user_id", op, params...)
}

func (o _SessionsObjs) FilterExpiryDate(op string, p time.Time, ps ...time.Time) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("expiry_date", op, params...)
}

///// Managed Objects Columns definition

func (o _SessionsObjs) ColumnSessionId(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"session_id", value}
}

func (o _SessionsObjs) ColumnUserId(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"user_id", value}
}

func (o _SessionsObjs) ColumnExpiryDate(p ...time.Time) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"expiry_date", value}
}

////// Internal helper funcs

func (o _SessionsObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _SessionsObjs) toSessions(columns []gmq.Column, rb []sql.RawBytes) Sessions {
	obj := Sessions{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "session_id":
				obj.SessionId = gmq.AsString(rb[i])
			case "user_id":
				obj.UserId = gmq.AsInt(rb[i])
			case "expiry_date":
				obj.ExpiryDate = gmq.AsTime(rb[i])
			}
		}
	}
	return obj
}

func (o _SessionsObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "SessionId":
			data = append(data, o.ColumnSessionId())
		case "UserId":
			data = append(data, o.ColumnUserId())
		case "ExpiryDate":
			data = append(data, o.ColumnExpiryDate())
		}
	}
	return data
}

func (o _SessionsObjs) columnsWithData(obj Sessions, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "SessionId":
			data = append(data, o.ColumnSessionId(obj.SessionId))
		case "UserId":
			data = append(data, o.ColumnUserId(obj.UserId))
		case "ExpiryDate":
			data = append(data, o.ColumnExpiryDate(obj.ExpiryDate))
		}
	}
	return data
}

var SessionsObjs _SessionsObjs

func init() {
	SessionsObjs.fcMap = map[string]string{
		"SessionId":  "session_id",
		"UserId":     "user_id",
		"ExpiryDate": "expiry_date",
	}
	gob.Register(Sessions{})
}
